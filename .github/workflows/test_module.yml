name: Test nf-scil module

on:
  workflow_dispatch:
    inputs:
      module:
        description: "A tag describing the module"
        required: true
        type: string
      profile:
        description: "Which profile to use to run the module's tests"
        required: true
        default: 'docker'
        type: choice
        options:
          - docker
          - singularity
  workflow_call:
    inputs:
      module:
        description: "A tag describing the module"
        required: true
        type: string
      profile:
        description: |
          Which profile to use to run the module's tests, either :
            - docker
            - singularity
        required: true
        type: string

env:
  NXF_SINGULARITY_CACHEDIR: /home/runner/.singularity_cache/.singularity
  NXF_SINGULARITY_LIBRARYDIR: ${{ github.workspace }}/.singularity

run-name: Test ${{ inputs.module }}
jobs:
  pytest:
    runs-on: scilus-nf-scil-runners
    name: pytest-${{ inputs.module }}
    if: inputs.module != ''
    env:
      NXF_ANSI_LOG: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip pytest-workflow cryptography

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v2

      - name: Setup apptainer
        if: inputs.profile == 'singularity'
        uses: eWaterCycle/setup-apptainer@main

      - name: Set up Singularity
        if: inputs.profile == 'singularity'
        run: |
          mkdir -p $NXF_SINGULARITY_CACHEDIR
          mkdir -p $NXF_SINGULARITY_LIBRARYDIR

      - name: Pull scilus image into cache
        if: inputs.profile == 'singularity'
        run: |
          apptainer pull docker://scilus/scilus:1.6.0

      # Test the module
      - name: Run pytest-workflow
        # only use one thread for pytest-workflow to avoid race condition on conda cache.
        run: |
            TMPDIR=/home/runner/_work PROFILE=${{ inputs.profile }} pytest --tag ${{ inputs.module }} --symlink --kwdof --git-aware --color=yes

      - name: Setting global variables
        uses: actions/github-script@v6
        if: failure()
        id: parsed
        with:
          script: |
            return '${{ inputs.module }}'.toLowerCase().replaceAll(/\//g, '-').trim('-').trim('"')
          result-encoding: string

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: logs-${{ inputs.profile }}-${{ steps.parsed.outputs.result }}
          path: |
            /home/runner/_work/pytest_workflow_*/*/.nextflow.log
            /home/runner/_work/pytest_workflow_*/*/log.out
            /home/runner/_work/pytest_workflow_*/*/log.err
            /home/runner/_work/pytest_workflow_*/**/.command.log
            /home/runner/_work/pytest_workflow_*/**/.command.sh
            /home/runner/_work/pytest_workflow_*/**/.command.run
            !${{ github.workspace }}/.singularity
